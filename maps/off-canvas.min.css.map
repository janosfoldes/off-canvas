{"version":3,"sources":["../maps/off-canvas.scss","../node_modules/foundation-sites/scss/util/_unit.scss"],"names":[],"mappings":"AAgCA,YACI,UANmB,AASf,6CAlBgC,AAkBhC,qCAlBgC,AAmBhC,gBAAgB,AAChB,eAAe,AACf,8CAb2B,AAa3B,sCAb2B,AAa3B,8BAb2B,AAa3B,yDAb2B,CAMnC,AA4EC,oBA/DW,wBAAA,AAAgB,eAAA,CAb5B,AAcS,mBAKG,SAzCM,AA0CN,iBACA,ACmC6C,gBDpExC,AAkCL,OA5CQ,AA6CR,QA7CI,AA8CJ,oCAAA,AAA+F,gCAA/F,AAA+F,2BAAA,CAxB3G,AA4BS,2BAFO,gCAAA,AAAwB,4BAAxB,AAAwB,uBAAA,CA1BxC,AA2Ba,iBAMD,SAtDM,AAuDN,aAAa,AACb,gBACA,ACoB6C,eDnExC,AAgDL,OA1DQ,AA2DR,MA3DE,AA4DF,qCAAA,AAAgG,iCAAhG,AAAgG,4BAAA,CAvC5G,AA2CS,yBAFO,gCAAA,AAAwB,4BAAxB,AAAwB,uBAAA,CAzCxC,AA0Ca,kBAMD,SApEM,AAqEN,aAAa,AACb,gBACA,ACK6C,eDlExC,AA8DL,QAxEI,AAyEJ,MAzEE,AA0EF,oCAAA,AAA8F,gCAA9F,AAA8F,2BAAA,CAtD1G,AA0DS,0BAFO,gCAAA,AAAwB,4BAAxB,AAAwB,uBAAA,CAxDxC,AAyDa,gBAMD,iBACA,ACR6C,gBDjExC,AA0EL,OApFQ,AAqFR,QArFI,AAsFJ,MAtFE,AAuFF,qCAAA,AAA+F,iCAA/F,AAA+F,4BAAA,CApE3G,AAwES,wBAFO,gCAAA,AAAwB,4BAAxB,AAAwB,uBAAA,CAC3B,AAUb,gBACI,8BAnGqC,AAoGrC,eAAe,AACf,YAAY,AACZ,OAAO,AACP,UAAU,AACV,eAAe,AACf,MAAM,AACN,wDA/F+B,AA+F/B,gDA/F+B,AAiG/B,kBAAkB,AAClB,WAAW,AACX,SAlGmB,CAsFvB,AAoBC,2BAHO,UAAU,AACV,kBAAmB,CACtB","file":"../dist/off-canvas.min.css","sourcesContent":["// OFF-CANVAS\r\n// ==========\r\n\r\n@import '@janosfoldes/scss-utils/index';\r\n@import 'foundation-sites/scss/util/util';\r\n\r\n// Settings\r\n//---------\r\n\r\n$off-canvas-crop: (\r\n    bottom: (x 0 0 0),\r\n    left:   (0 x 0 0),\r\n    right:  (0 0 0 x),\r\n    top:    (0 0 x 0)\r\n) !default;\r\n$off-canvas-exit-background: rgba(#0a0a0a, .15) !default;\r\n$off-canvas-offset: 4 !default;\r\n$off-canvas-reveal-at: -1 !default;\r\n$off-canvas-shadow: 0 0 2px rgba(#0a0a0a, .7) !default;\r\n$off-canvas-sizes: (\r\n    bottom: (none, rem-calc(256)),\r\n    left:   (none, rem-calc(256)),\r\n    right:  (none, rem-calc(256)),\r\n    top:    (none, rem-calc(256))\r\n) !default;\r\n$off-canvas-transition-duration: .4s !default;\r\n$off-canvas-transition-timing: ease !default;\r\n$off-canvas-z-index: 98 !default;\r\n\r\n// Off-Canvas\r\n//-----------\r\n\r\n.off-canvas {\r\n    z-index: $off-canvas-z-index;\r\n\r\n    @include breakpoint($off-canvas-reveal-at down) {\r\n        box-shadow: $off-canvas-shadow;\r\n        overflow-y: auto;\r\n        position: fixed;\r\n        transition: transform $off-canvas-transition-duration $off-canvas-transition-timing;\r\n\r\n        // Disable Animation\r\n        // -----------------\r\n\r\n        &.no-anim {\r\n            transition: none;\r\n        }\r\n\r\n        // Bottom Position\r\n        // ---------------\r\n        &.bottom {\r\n            bottom: get-setting($off-canvas-crop, bottom, 3);\r\n            max-height: get-setting($off-canvas-sizes, bottom, 2);\r\n            min-height: get-setting($off-canvas-sizes, bottom, 1);\r\n            left: get-setting($off-canvas-crop, bottom, 4);;\r\n            right: get-setting($off-canvas-crop, bottom, 2);\r\n            transform: translateY(rem-calc(get-setting($off-canvas-sizes, bottom, 2) + $off-canvas-offset));\r\n            &.is-open {\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n        // Left Position\r\n        // -------------\r\n        &.left {\r\n            bottom: get-setting($off-canvas-crop, left, 3);\r\n            height: 100vh;\r\n            max-width: get-setting($off-canvas-sizes, left, 2);\r\n            min-width: get-setting($off-canvas-sizes, left, 1);\r\n            left: get-setting($off-canvas-crop, left, 4);\r\n            top: get-setting($off-canvas-crop, left, 1);\r\n            transform: translateX(-(rem-calc(get-setting($off-canvas-sizes, left, 2) + $off-canvas-offset)));\r\n            &.is-open {\r\n                transform: translateX(0);\r\n            }\r\n        }\r\n\r\n        // Right Position\r\n        // --------------\r\n        &.right {\r\n            bottom: get-setting($off-canvas-crop, right, 3);\r\n            height: 100vh;\r\n            max-width: get-setting($off-canvas-sizes, right, 2);\r\n            min-width: get-setting($off-canvas-sizes, right, 1);\r\n            right: get-setting($off-canvas-crop, right, 2);\r\n            top: get-setting($off-canvas-crop, right, 1);\r\n            transform: translateX(rem-calc(get-setting($off-canvas-sizes, right, 2) + $off-canvas-offset));\r\n            &.is-open {\r\n                transform: translateX(0);\r\n            }\r\n        }\r\n\r\n        // Top Position\r\n        // -------------\r\n        &.top {\r\n            max-height: get-setting($off-canvas-sizes, top, 2);\r\n            min-height: get-setting($off-canvas-sizes, top, 1);\r\n            left: get-setting($off-canvas-crop, top, 4);\r\n            right: get-setting($off-canvas-crop, top, 2);\r\n            top: get-setting($off-canvas-crop, top, 1);\r\n            transform: translateY(-(rem-calc(get-setting($off-canvas-sizes, top, 2) + $off-canvas-offset)));\r\n            &.is-open {\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// Canvas Overlay\r\n// --------------\r\n\r\n.canvas-overlay {\r\n    background: $off-canvas-exit-background;\r\n    cursor: pointer;\r\n    height: 100%;\r\n    left: 0;\r\n    opacity: 0;\r\n    position: fixed;\r\n    top: 0;\r\n    transition: opacity $off-canvas-transition-duration $off-canvas-transition-timing,\r\n                visibility $off-canvas-transition-duration $off-canvas-transition-timing;\r\n    visibility: hidden;\r\n    width: 100%;\r\n    z-index: $off-canvas-z-index - 1;\r\n\r\n    // Overlay Visible\r\n    //----------------\r\n    &.is-visible {\r\n        opacity: 1;\r\n        visibility: visible;\r\n    }\r\n}","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group functions\n////\n\n$global-font-size: 100% !default;\n\n/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.\n///\n/// @param {Number} $num - Number to strip unit from.\n///\n/// @returns {Number} The same number, sans unit.\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n/// Converts one or more pixel values into matching rem values.\n///\n/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.\n/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$global-font-size` variable as the base.\n///\n/// @returns {List} A list of converted values.\n@function rem-calc($values, $base: null) {\n  $rem-values: ();\n  $count: length($values);\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  // Using rem as base allows correct scaling\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if $count == 1 {\n    @return -zf-to-rem($values, $base);\n  }\n\n  @for $i from 1 through $count {\n    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));\n  }\n\n  @return $rem-values;\n}\n\n// Converts a unitless, pixel, or rem value to em, for use in breakpoints.\n@function -zf-bp-to-em($value) {\n  // Pixel and unitless values are converted to rems\n  @if unit($value) == 'px' or unitless($value) {\n    $value: rem-calc($value, $base: 16px);\n  }\n\n  // Then the value is converted to ems\n  @return strip-unit($value) * 1em;\n}\n\n/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.\n/// @access private\n///\n/// @param {Number} $value - Pixel value to convert.\n/// @param {Number} $base [null] - Base for pixel conversion.\n///\n/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.\n@function -zf-to-rem($value, $base: null) {\n  // Check if the value is a number\n  @if type-of($value) != 'number' {\n    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';\n    @return $value;\n  }\n\n  // Transform em into rem if someone hands over 'em's\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * 1rem;\n  }\n\n  // Calculate rem if units for $value is not rem or em\n  @if unit($value) != 'rem' {\n    $value: strip-unit($value) / strip-unit($base) * 1rem;\n  }\n\n  // Turn 0rem into 0\n  @if $value == 0rem {\n    $value: 0;\n  }\n\n  @return $value;\n}\n\n/// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.\n///\n/// @param {Number} $value - Value to convert to a unitless line height\n/// @param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size\n///\n/// @return {Number} - Unitless number\n@function unitless-calc($value, $base: null) {\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // First, lets convert our $base to pixels\n\n  // If the base font size is a %, then multiply it by 16px\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if unit($base) == 'em' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  // Now let's convert our value to pixels too\n  @if unit($value) == '%' {\n    $value: ($value / 100%) * $base;\n  }\n\n  @if unit($value) == 'rem' {\n    $value: strip-unit($value) * $base;\n  }\n\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * $base;\n  }\n\n  // 'px'\n  @if unit($value) == 'px' {\n    @return strip-unit($value) / strip-unit($base);\n  }\n\n  // assume that line-heights greater than 10 are meant to be absolute in 'px'\n  @if unitless($value) and ($value > 10) {\n    @return $value / strip-unit($base);\n  }\n\n  @return $value;\n}\n"]}